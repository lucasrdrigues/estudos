server {
	# Configurando a porta 443 para que escute com ssl
	listen 443 ssl;
	
	# Configurando o certificado e a chave necessária. Para testar use: https://localhost 
	ssl_certificate /home/lucas/ti/estudos/alura/nginx/https/localhost.crt;
	ssl_certificate_key /home/lucas/ti/estudos/alura/nginx/https/localhost.key;
	
        root /home/lucas/ti/estudos/alura/nginx/performance;
        index index.html;
        gzip on;
        gzip_types image/jpg text/css;
        add_header keep-Alive "timeout=5, max=1000";
        location ~ \.jpg$ {
                expires 30d;
                add_header Cache-Control public;
        }
}

server {
	listen 8005;

	# Como essas configs sao pro servidor todo, não precisar deixar dentro do location
	root /home/lucas/ti/estudos/alura/nginx/performance;
	index index.html;

	# Ativando a compressão para enviar arquivos comprimidos
	# Por padrão, ele comprime somente o .html que estamos enviando
	# Precisamos informar quais tipos de arquivos queremos que sejam comprimidos. Podemos ver isso no Content-Type no cabeçalho.
	# Podemos ver que está comprimido em um cabeçalho http(content enconding) de um arquivo no dev tools
	gzip on;
	gzip_types image/jpg text/css;

	# Configurando o keep alive
	add_header keep-Alive "timeout=5, max=1000";

	# Qualquer requisição para .jpg
	location ~ \.jpg$ {
		# Indica para o navegador que receber a resposta que a imagem expira em 30d, fazendo-o fazer cache
		# Quando adicionamos esta informação, no cabeçalho http da resposta no dev tools, aparecerá um cabeçalho
		# chamado cache-control com max-age=2592000, tempo em segundos e outro chamado expires. O campo cache control também
		# pode recber outros valores, como veremos mais abaixo.
		# Para ver isso clique no arquivo recebido.
		expires 30d;
		
		# Indicando que o conteúdo pode ser armazenado em cache por qualquer intermediário, não apenas pelo navegador do usuário.
		#  Isso inclui proxies, CDNs (Content Delivery Networks) ou caches de rede entre o cliente e o servidor. Caso esse 
		# intermediário saiba fazer cache(configurado), ele usará essa informação e poderá realizar cache.
		# Fazemos isso adicionando um cabeçalho http com "add_header".
		add_header Cache-Control public;
	}
}
